}
p.IDCV.cao <- ggplot(data=data.frame(confusionMatrix/colSums(confusionMatrix)), aes(x= clustersTest, y= preds, fill=Freq))+geom_tile()+
xlab("Cluster predicted by SVM")+
ylab("Cluster estimated with kmeans")+
ggtitle("(e) Intradataset cross validation",
"that uses data twice")+
scale_fill_viridis_c(begin=0, end=1, limits=c(0,1))+
labs(fill="Proportion") + coord_fixed()
sum(diag(confusionMatrix))/sum(confusionMatrix)
#### Carries out the simulation for Panel F of Figure 1
Xtrain <- t(apply(Xnull, 1, function(u) betaBinSample(u, 1, 0.5)))
Xtest <- Xnull-Xtrain
#### Cluster both datasets on log scale.
Ytrain <- log(Xtrain+1)
Ytest <- log(Xtest+1)
clustersTrain <- kmeans(Ytrain, centers=numClust, nstart=50)$cluster
clustersTest <- kmeans(Ytest, centers=numClust, nstart=50)$cluster
myTab <- table(clustersTrain, clustersTest)
p.IDCV.cs <- ggplot(data=data.frame(myTab/colSums(myTab)),
aes(x= clustersTrain, y= clustersTest, fill=Freq))+geom_tile()+
xlab(expression("Cluster estimated from"~X^{(1)}))+
ylab(expression("Cluster estimated from"~X^{(2)}))+
ggtitle("(f) Intradataset cross validation",
"using our proposed method")+
coord_fixed()+
labs(fill="Proportion")+
scale_fill_viridis_c(begin=0, end=1, limits=c(0,1))
#### MAKE THE FIGURE
library(viridis)
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(title=element_text(size=8)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(title=element_text(size=8), subtitle = element_text(size=8)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(title=element_text(size=8), plot.subtitle = element_text(size=8)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(plot.title=element_text(size=8), plot.subtitle = element_text(size=8)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
library(tidyverse)
library(patchwork)
### This is the main function that will be used for NBCS.
### Also implemented in the forthcoming R package for NBCS.
betaBinSample <- function(x, b,eps) {
p <- rbeta(length(x),eps*b,(1-eps)*b)
return(rbinom(length(x),x,p))
}
#### Make panel a of figure 1
set.seed(2)
X <- matrix(rnbinom(200, mu=5, size=5), ncol=2)
hX <- log(X+1)
predMean <- colMeans(hX)
totalMSE <- sum(apply(hX, 1, function(u) (u-predMean)^2))/200
p1 <- ggplot(data=NULL, aes(x=hX[,1], y=hX[,2]))+geom_point()+xlab("Gene 1 (log scale)")+ ylab("Gene 2 (log scale)")+
theme_bw()+coord_fixed()+theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
ggtitle("(a) Example data realization")+
xlim(0,3)+ylim(0,3)
### Make panel b of Figure 1
set.seed(2)
cluster.full <- kmeans(hX, centers=2, nstart=20)$cluster
k2_SSE <- 0
for (k in 1:2) {
clusterDat <- hX[cluster.full==k,]
clusterMean <- colMeans(clusterDat)
k2_SSE <- k2_SSE + sum(apply(clusterDat,1,function(u) (u-clusterMean)^2))
}
k2_MSE <- k2_SSE/200
pval <- summary(MASS::glm.nb(X[,1]~as.factor(cluster.full)))$coefficients[2,4]
p2 <- ggplot(data=NULL, aes(x=hX[,1], y=hX[,2], col=as.factor(cluster.full)))+
geom_point()+xlab("Gene 1 (log scale)")+ ylab("Gene 2 (log scale)")+
theme_bw()+coord_fixed()+theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
guides(col="none")+
xlim(0,3)+ylim(0,3)+
ggtitle("(b) Example data realization,", "colored by estimated cluster")
#### Carries out the MSE simulation for Panel C of Figure 1
ktry <- 10
nTrials <- 1000
allMSEs <- matrix(NA, nrow=nTrials, ncol=ktry)
sampSplitMSEs <- matrix(NA, nrow=nTrials, ncol=ktry)
countSplitMSEs <- matrix(NA, nrow=nTrials, ncol=ktry)
for (t in 1:nTrials) {
set.seed(t)
X <- matrix(rnbinom(200, mu=5, size=5), ncol=2)
Xtrain <- X[1:50,]
Xtest <- X[51:100,]
XtrainCS <- apply(X, 1:2, function(u) betaBinSample(u, 5, 0.5))
XtestCS <- X - XtrainCS
hX <- log(X+1)
hXtrain <- hX[1:50,]
hXtest <- hX[51:100,]
hXtrainCS <- log(XtrainCS+1)
hXtestCS <- log(XtestCS+1)
for (k in 1:ktry) {
cluster.full.try <- kmeans(hX, centers=k)$cluster
cluster.train.try <- kmeans(hXtrain, centers=k)$cluster
cluster.test.try <- class::knn(hXtrain, hXtest, cluster.train.try,3)
cluster.cs.try <- kmeans(hXtrainCS, centers=k)$cluster
k_SSE <- 0
k_SSE_train <- 0
k_SSE_cs <- 0
for (kp in 1:k) {
clusterDat <- X[cluster.full.try==kp,,drop='F']
clusterMean <- colMeans(clusterDat)
clusterDatTrain <- Xtrain[cluster.train.try == kp,,drop='F']
clusterDatTest <- Xtest[cluster.test.try== kp,,drop='F']
clusterDatCS.Train <- XtrainCS[cluster.cs.try== kp,,drop='F']
clusterDatCS.Test <- XtestCS[cluster.cs.try== kp,,drop='F']
clusterMeanTrain <- colMeans(clusterDatTrain)
clusterMeanTrainCS <- colMeans(clusterDatCS.Train)
k_SSE <- k_SSE + sum(apply(clusterDat,1,function(u) (log(u+1)-log(clusterMean+1))^2))
k_SSE_train <- k_SSE_train + sum(apply(clusterDatTest,1,function(u) (log(u+1)-log(clusterMeanTrain+1))^2))
k_SSE_cs <- k_SSE_cs + sum(apply(clusterDatCS.Test,1,function(u) (log(u+0.5)-log( clusterMeanTrainCS+0.5))^2))
}
allMSEs[t, k] <- k_SSE/200
sampSplitMSEs[t,k] <- k_SSE_train/100
countSplitMSEs[t,k] <- k_SSE_cs/200
}
}
naiveCol <- "purple"
sampSplitCol <- "grey"
csCol <- "blue"
pMSEthree <- ggplot(data=NULL, aes(x=1:ktry, y=colMeans(sampSplitMSEs, na.rm=TRUE), col="bSample Splitting"))+
geom_line()+theme_bw()+geom_point(aes(col="bSample Splitting"))+
geom_point(aes(x=1:ktry, y=colMeans(allMSEs), col="aUse data twice"))+
geom_line(aes(x=1:ktry, y=colMeans(allMSEs), col="aUse data twice"))+
geom_point(aes(x=1:ktry, y=colMeans(countSplitMSEs), col="cOur proposed method"))+
geom_line(aes(x=1:ktry, y=colMeans(countSplitMSEs), col="cOur proposed method"))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
xlab("Number of clusters")+ylab("Average MSE")+
ggtitle("(c) Average within cluster MSE,", "over 1000 datasets")+
scale_color_manual(values=c(naiveCol, sampSplitCol,csCol))+
guides(col="none")
### Carries out the differential expression simulation for Panel D of Figure 1
nTrials <- 1000
pvalsNaive <- rep(NA, nrow=nTrials)
pvals_sampsplit <- rep(NA, nrow=nTrials)
pvals_cs <- rep(NA, nrow=nTrials)
for (t in 1:nTrials) {
set.seed(t)
X <- matrix(rnbinom(200, mu=5, size=5), ncol=2)
hX <- log(X+1)
hXtrain <- hX[1:50,]
hXtest <- hX[51:100,]
Xtest <- X[51:100,]
XtrainCS <- apply(X, 1:2, function(u) betaBinSample(u, 5, 0.5))
XtestCS <- X - XtrainCS
cluster.full.try <- kmeans(hX, centers=2)$cluster
cluster.train.try <- kmeans(hXtrain, centers=2)$cluster
cluster.test.try <- class::knn(hXtrain, hXtest, cluster.train.try,3)
cluster.cs.try <- kmeans(log(XtrainCS+1), centers=2)$cluster
pvalsNaive[t] <- summary(MASS::glm.nb(X[,1]~as.factor(cluster.full.try)))$coefficients[2,4]
pvals_sampsplit[t] <- summary(MASS::glm.nb(Xtest[,1]~as.factor(cluster.test.try)))$coefficients[2,4]
pvals_cs[t] <- summary(MASS::glm.nb(XtestCS[,1]~as.factor(cluster.cs.try)))$coefficients[2,4]
}
pQQthree <- ggplot(data=NULL)+
geom_qq(aes(sample=as.numeric(pvals_sampsplit), col="bSample Splitting"), distribution="qunif")+
geom_qq(aes(sample=as.numeric(pvalsNaive), col="aUse data twice"), distribution="qunif")+
geom_qq(aes(sample=as.numeric(pvals_cs), col="cOur proposed method"), distribution="qunif")+
theme_bw()+
scale_color_manual(values=c(naiveCol, sampSplitCol, csCol),
labels=c("Use full data twice", "Sample Splitting", "Our proposed method"))+
geom_abline(intercept=0,slope=1)+
ggtitle("(d) P-values for gene 1,", "over 1000 datasets")+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
coord_fixed()+labs(col="Method")
#### Carries out the IDCV procedure for Panel E of Figure 1.
set.seed(2)
n <- 100
p <- 2
Xnull <- matrix(rnbinom(n*p, mu=5, size=5), ncol=p)
clusters <- kmeans(log(Xnull+1), centers=5)$cluster
Y <- log(Xnull+1)
numClust <- 5
folds <- 5
clusterLabs <- as.factor(kmeans(Y, centers=numClust, nstart=50)$cluster)
confusionMatrix <- matrix(0, nrow=numClust, ncol=numClust)
crossValIndices <- sample(1:n, size=n, replace=FALSE)
counter <- 1
for (f in 1:folds) {
testIndices <-  crossValIndices[counter:(counter+n/folds-1)]
counter <- counter+n/folds
Ytrain <- Y[-testIndices,]
Ytest <- Y[testIndices,]
clustersTrain <- clusterLabs[-testIndices]
clustersTest <- clusterLabs[testIndices]
classifier <- e1071::svm(x=Ytrain, y=as.factor(clustersTrain), kernel="linear")
preds <- predict(classifier, newdata=Ytest)
confusionMatrix <- confusionMatrix + table(preds, clustersTest)
}
p.IDCV.cao <- ggplot(data=data.frame(confusionMatrix/colSums(confusionMatrix)), aes(x= clustersTest, y= preds, fill=Freq))+geom_tile()+
xlab("Cluster predicted by SVM")+
ylab("Cluster estimated with kmeans")+
ggtitle("(e) Intradataset cross validation",
"that uses data twice")+
scale_fill_viridis_c(begin=0, end=1, limits=c(0,1))+
labs(fill="Proportion") + coord_fixed()
sum(diag(confusionMatrix))/sum(confusionMatrix)
#### Carries out the simulation for Panel F of Figure 1
Xtrain <- t(apply(Xnull, 1, function(u) betaBinSample(u, 1, 0.5)))
Xtest <- Xnull-Xtrain
#### Cluster both datasets on log scale.
Ytrain <- log(Xtrain+1)
Ytest <- log(Xtest+1)
clustersTrain <- kmeans(Ytrain, centers=numClust, nstart=50)$cluster
clustersTest <- kmeans(Ytest, centers=numClust, nstart=50)$cluster
myTab <- table(clustersTrain, clustersTest)
p.IDCV.cs <- ggplot(data=data.frame(myTab/colSums(myTab)),
aes(x= clustersTrain, y= clustersTest, fill=Freq))+geom_tile()+
xlab(expression("Cluster estimated from"~X^{(1)}))+
ylab(expression("Cluster estimated from"~X^{(2)}))+
ggtitle("(f) Intradataset cross validation",
"using our proposed method")+
coord_fixed()+
labs(fill="Proportion")+
scale_fill_viridis_c(begin=0, end=1, limits=c(0,1))
#### MAKE THE FIGURE
library(viridis)
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(plot.title=element_text(size=12),
plot.subtitle = element_text(size=12),
axis.title = element_text(size=10)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
ggsave("~/Dropbox/nbCS_paper/v11/figures/intro_MEGA.png",
width=11, height=5)
ggsave("~/Dropbox/nbCS_paper/v16-biometrics/figures/intro_MEGA.png",
width=11, height=5)
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(plot.title=element_text(size=12),
plot.subtitle = element_text(size=12),
axis.title = element_text(size=10),
legend.title = element_text(size=10)
legend.text = element_test(size=10)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(plot.title=element_text(size=12),
plot.subtitle = element_text(size=12),
axis.title = element_text(size=10),
legend.title = element_text(size=10),
legend.text = element_test(size=10)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
p1+p2+pMSEthree+pQQthree+p.IDCV.cao+p.IDCV.cs+
plot_layout(guides="collect", nrow=2, widths=c(1,1,1)) &
theme(plot.title=element_text(size=12),
plot.subtitle = element_text(size=12),
axis.title = element_text(size=10),
legend.title = element_text(size=10),
legend.text = element_text(size=10)) &
labs(fill = "Proportion of cells \nin column \nbelonging to row")
ggsave("~/Dropbox/nbCS_paper/v16-biometrics/figures/intro_MEGA.png",
width=11, height=6)
library(tidyverse)
library(patchwork)
setwd("~/Dropbox/nbCS_paper/sims/New_figures_for_paper/res")
file_names <- dir("~/Dropbox/nbCS_paper/sims/New_Figures_for_paper/res", pattern="jan9_propCor*") #where you have your files
res <- do.call(rbind,lapply(file_names,read.csv,sep="",header=FALSE))
names(res) <- c("mse", "rand", "k", "bestRand", "kGuess",
"method", "n", "p", "B1", "K", "overdisp", "eps")
library(tidyverse)
library(patchwork)
setwd("~/nbcs_paper/res")
file_names <- dir("~/nbcs_paper/res", pattern="jan9_propCor*") #where you have your files
res <- do.call(rbind,lapply(file_names,read.csv,sep="",header=FALSE))
names(res) <- c("mse", "rand", "k", "bestRand", "kGuess",
"method", "n", "p", "B1", "K", "overdisp", "eps")
table(res$n)
table(res$p)
res$method2 <- paste(res$method, res$eps, sep="")
table(res$method2)
res$method2 <- ordered(res$method2,
levels=c("known.onefold0.5",
"sct.onefold0.5",
"known.onefold0.9",
"sct.onefold0.9",
"known.10fold0.9",
"sct.10fold0.9"))
mediumDim_res <- res %>% filter(n==500, p==40)
propCorrect_medium  <- res  %>% filter(k==K) %>% group_by(method2, K, eps, B1, overdisp) %>%
summarize(correct = mean(K==kGuess),
rand = mean(rand),
correctRand = mean(K==bestRand)) %>%
mutate(K2 = paste("True K* =", K),
overdisp2 = ifelse(overdisp==5, "Severe Overdispersion", "Mild Overdispersion"),
method2 = ifelse(method2=="known.onefold0.9", "NBCS-known, \u03B5 = 0.9", "NBCV-known, 10 folds"))
p1 <- ggplot(data=propCorrect_medium %>% filter(overdisp !=10, eps > 0.5, K %in% c(1,3,5),
overdisp %in% c(1,5)),
aes(x=B1, y=correct, col=method2))+geom_line()+
facet_grid( vars(overdisp2),vars(K2))+xlab(expression(beta))+ylab("Proportion of times we chose correct K")+
theme_bw()+
labs(col="Method")+ggtitle("Proportion of times we select correct K")+
scale_color_manual(values=c("cyan", "navy"))
p1 + plot_layout(guides="collect")
p1 + plot_layout(guides="collect") + theme(plot.title=element_text(size=12),
plot.subtitle = element_text(size=12),
axis.title = element_text(size=10),
legend.title = element_text(size=10),
legend.text = element_text(size=10)) &
ggsave("~/Dropbox/nbCS_paper/v16-biometrics/figures/multifold_comp_low.png", width=8, height=5)
p1 + plot_layout(guides="collect") + theme(plot.title=element_text(size=12),
plot.subtitle = element_text(size=12),
axis.title = element_text(size=10),
legend.title = element_text(size=10),
legend.text = element_text(size=10))
ggsave("~/Dropbox/nbCS_paper/v16-biometrics/figures/multifold_comp_low.png", width=8, height=5)
setwd("~/nbcs_paper/Fig8/real_data_results/")
#### PANEL A
main_idcv_table <- readRDS("3_fca_kidney_full_confusionmatrix.rds")
main_idcv_prop <- as.table(apply(main_idcv_table , 2, function(u) u/sum(u)))
main_idcv_df <- data.frame(main_idcv_prop)
names(main_idcv_df ) <- c("SVM_cluster", "clustering_cluster", "Freq")
fake_data <- c(NA, NA)
for (row in 1:NROW(main_idcv_table)){
for (col in 1:NCOL(main_idcv_table)) {
fake_data <- rbind(fake_data, matrix(
rep(
c(rownames(main_idcv_table)[row],
colnames(main_idcv_table)[col]
), main_idcv_table[row, col]),
ncol=2, byrow=TRUE))
}
}
fake_data <- data.frame(fake_data[-1,])
names(fake_data) <- c("SVM", "cluster")
pA <- ggplot(data=main_idcv_df,
aes(x=clustering_cluster, y=SVM_cluster, fill=Freq))+
geom_tile()+
scale_fill_viridis_c(
begin=0, end=1, limits=c(0,1))+
xlab("Original cluster assignment")+
ylab("Cluster predicted by SVM")+
ggtitle(paste("(a) ARI = ", signif(mclust::adjustedRandIndex(fake_data$SVM, fake_data$cluster),4)))
#### PANEL E
sub_idcv_table <- readRDS("3_fca_metanephric_full_confusionmatrix.rds")
sub_idcv_prop <- as.table(apply(sub_idcv_table , 2, function(u) u/sum(u)))
sub_idcv_df <- data.frame(sub_idcv_prop)
names(sub_idcv_df ) <- c("SVM_cluster", "clustering_cluster", "Freq")
fake_data_sub <- c(NA, NA)
for (row in 1:NROW(sub_idcv_table)){
for (col in 1:NCOL(sub_idcv_table)) {
fake_data_sub <- rbind(fake_data_sub, matrix(
rep(
c(rownames(sub_idcv_table)[row],
colnames(sub_idcv_table)[col]
), sub_idcv_table[row, col]),
ncol=2, byrow=TRUE))
}
}
fake_data_sub <- data.frame(fake_data_sub[-1,])
names(fake_data_sub) <- c("SVM", "cluster")
pE <- ggplot(data=sub_idcv_df,
aes(x=clustering_cluster, y=SVM_cluster, fill=Freq))+
geom_tile()+
scale_fill_viridis_c(
begin=0, end=1, limits=c(0,1))+
xlab("Original cluster assignment")+
ylab("Cluster predicted by SVM")+
ggtitle(paste("(e) ARI = ", signif(mclust::adjustedRandIndex(fake_data_sub$SVM, fake_data_sub$cluster),4)))
### PANEL B
main_pois_test <- read.csv("1_fca_kidney_poistest_clusters_1e-6_75.tsv", sep="\t")
names(main_pois_test) <- c("name", "test_cluster")
main_pois_train <- read.csv("1_fca_kidney_poistrain_clusters_1e-6_75.tsv", sep="\t")
names(main_pois_train) <- c("name", "train_cluster")
main_pois_confusion_tab <- table(main_pois_test$test_cluster,main_pois_train$train_cluster)
main_pois_confusion_prop <- as.table(apply(main_pois_confusion_tab, 2, function(u) u/sum(u)))
main_pois_confusion_df <- data.frame(main_pois_confusion_prop)
names(main_pois_confusion_df) <- c("test_cluster", "train_cluster", "Freq")
main_pois_confusion_df$test_cluster <-
factor(main_pois_confusion_df$test_cluster, ordered=TRUE,
levels=c("1", "2", "3", "4", "5", "6",
"8", "7"))
main_pois_confusion_df$train_cluster <-
factor(main_pois_confusion_df$train_cluster, ordered=TRUE,
levels=c("1", "2", "3", "4", "5", "8", "6", "7"))
pB <- ggplot(data=main_pois_confusion_df, aes(x=train_cluster, y=test_cluster, fill=Freq))+
geom_tile()+
scale_fill_viridis_c(
begin=0, end=1, limits=c(0,1))+
xlab(expression("Cluster estimated from"~X^{(1)}))+
ylab(expression("Cluster estimated from"~X^{(2)}))+
ggtitle(paste("(b) ARI = ",
signif(mclust::adjustedRandIndex(
main_pois_test$test_cluster,main_pois_train$train_cluster),4)))
### PANEL C
main_nb_test <- read.csv("1_fca_kidney_nbtest_clusters_1e-6_75.tsv", sep="\t")
names(main_nb_test) <- c("name", "test_cluster")
main_nb_train <- read.csv("1_fca_kidney_nbtrain_clusters_1e-6_75.tsv", sep="\t")
names(main_nb_train) <- c("name", "train_cluster")
main_nb_confusion_tab <- table(main_nb_test$test_cluster,main_nb_train$train_cluster)
main_nb_confusion_prop <- as.table(apply(main_nb_confusion_tab, 2, function(u) u/sum(u)))
main_nb_confusion_df <- data.frame(main_nb_confusion_prop)
names(main_nb_confusion_df) <- c("test_cluster", "train_cluster", "Freq")
main_nb_confusion_df$test_cluster <-
factor(main_nb_confusion_df$test_cluster, ordered=TRUE,
levels = c("1", "2", "3", "6","4", "5", "7"))
main_nb_confusion_df$train_cluster <-
factor(main_nb_confusion_df$train_cluster, ordered=TRUE,
levels = c("1", "2", "7", "3", "4", "5", "9", "6", "8"))
pC <- ggplot(data=main_nb_confusion_df, aes(x=train_cluster, y=test_cluster, fill=Freq))+
geom_tile()+
scale_fill_viridis_c(
begin=0, end=1, limits=c(0,1))+
xlab(expression("Cluster estimated from"~X^{(1)}))+
ylab(expression("Cluster estimated from"~X^{(2)}))+
ggtitle(paste("(c) ARI = ",
signif(mclust::adjustedRandIndex(
main_nb_test$test_cluster,main_nb_train$train_cluster),4)))
### PANEL E
sub_pois_test <- read.csv("2_fca_metanephric_poistest_clusters_2e-5_75.tsv", sep="\t")
names(sub_pois_test) <- c("name", "test_cluster")
sub_pois_train <- read.csv("2_fca_metanephric_poistrain_clusters_2e-5_75.tsv", sep="\t")
names(sub_pois_train) <- c("name", "train_cluster")
sub_pois_confusion_tab <- table(sub_pois_test$test_cluster,sub_pois_train$train_cluster)
sub_pois_confusion_prop <- as.table(apply(sub_pois_confusion_tab, 2, function(u) u/sum(u)))
sub_pois_confusion_df <- data.frame(sub_pois_confusion_prop)
names(sub_pois_confusion_df) <- c("test_cluster", "train_cluster", "Freq")
sub_pois_confusion_df$test_cluster <-
factor(sub_pois_confusion_df$test_cluster, ordered=TRUE,
levels=c("4", "1", "2", "3", "5", "6",
"7", "8", "9", "10", "11", "12"))
sub_pois_confusion_df$train_cluster <-
factor(sub_pois_confusion_df$train_cluster, ordered=TRUE,
levels=c("1", "2", "7", "3", "4", "6",
"5",  "8","9", "10"))
pF <- ggplot(data=sub_pois_confusion_df, aes(x=train_cluster, y=test_cluster, fill=Freq))+
geom_tile()+
scale_fill_viridis_c(
begin=0, end=1, limits=c(0,1))+
xlab(expression("Cluster estimated from"~X^{(1)}))+
ylab(expression("Cluster estimated from"~X^{(2)}))+
ggtitle(paste("(f) ARI = ",
signif(mclust::adjustedRandIndex(
sub_pois_test$test_cluster,sub_pois_train$train_cluster),4)))
### PANEL G
sub_nb_test <- read.csv("2_fca_metanephric_nbtest_clusters_2e-5_75.tsv", sep="\t")
names(sub_nb_test) <- c("name", "test_cluster")
sub_nb_train <- read.csv("2_fca_metanephric_nbtrain_clusters_2e-5_75.tsv", sep="\t")
names(sub_nb_train) <- c("name", "train_cluster")
sub_nb_confusion_tab <- table(sub_nb_test$test_cluster,sub_nb_train$train_cluster)
sub_nb_confusion_prop <- as.table(apply(sub_nb_confusion_tab, 2, function(u) u/sum(u)))
sub_nb_confusion_df <- data.frame(sub_nb_confusion_prop)
names(sub_nb_confusion_df) <- c("test_cluster", "train_cluster", "Freq")
sub_nb_confusion_df$test_cluster <-
factor(sub_nb_confusion_df$test_cluster, ordered=TRUE,
levels = c("4", "1", "6", "7", "3", "5", "2",
"8", "9", "10", "11", "12"))
sub_nb_confusion_df$train_cluster <-
factor(sub_nb_confusion_df$train_cluster, ordered=TRUE,
levels=c("1", "2", "3", "4",
"5", "6", "8","7","9", "10"))
pG <- ggplot(data=sub_nb_confusion_df, aes(x=train_cluster, y=test_cluster, fill=Freq))+
geom_tile()+
scale_fill_viridis_c(
begin=0, end=1, limits=c(0,1))+
xlab(expression("Cluster estimated from"~X^{(1)}))+
ylab(expression("Cluster estimated from"~X^{(2)}))+
ggtitle(paste("(g) ARI = ",
signif(mclust::adjustedRandIndex(
sub_nb_test$test_cluster,sub_nb_train$train_cluster),4)))
load("4_fca_metanephric_poistrain_clusters_2e-5_ari_all.tsv")
ari_pois_met <- ari_list
load("4_fca_kidney_poistrain_clusters_1e-6_ari_all.tsv")
ari_pois_kidney <- ari_list
load("4_fca_metanephric_nbtrain_clusters_2e-5_ari_all.tsv")
ari_nb_met <- ari_list
load("4_fca_kidney_nbtrain_clusters_1e-6_ari_all.tsv")
ari_nb_kidney  <- ari_list
ari_met <- data.frame(
"ari" = c(ari_pois_met, ari_nb_met),
"method" = c(rep("Assume Poisson", 10), rep("sctransform",10)),
"dataset" = "Metenephric Cells"
)
ari_kidney <- data.frame(
"ari" = c(ari_pois_kidney, ari_nb_kidney),
"method" = c(rep("Assume Poisson", 10), rep("sctransform",10)),
"dataset" = "Kidney Cells"
)
pH <- ggplot(data=ari_met, aes(x=method, y=ari))+
geom_boxplot()+
ggtitle("(h) ARI over 10 random splits")+
ylab("Adjusted Rand Index")+
xlab("Method")+
theme_bw()+
ylim(0,1)
pD <- ggplot(data=ari_kidney, aes(x=method, y=ari))+
geom_boxplot()+
ggtitle("(d) ARI over 10 random splits")+
ylab("Adjusted Rand Index")+
xlab("Method")+
theme_bw()+
ylim(0,1)
ari_both <- rbind(ari_kidney, ari_met)
pBoth <- ggplot(data=ari_both %>% filter(method=="sctransform"),
aes(y=ari, x=dataset))+geom_boxplot()+
ylim(0,1)+theme_bw()+ylab("Adjusted Rand Index")+xlab("")
pBoth
pC + ggtitle("")+ guides(fill="none")
pG+ ggtitle("") + guides(fill="none")
pA+pB+pC+pD+pE+pF+pG+pH+
plot_layout(guides="collect", nrow=2) &
labs(fill = "Proportion of cells \nin column \nbelonging to row") &
theme(legend.title = element_text(size=12))
